#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    listen stats :9000  # Listen on localhost:9000
    mode http
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    stats enable  # Enable stats page
    stats hide-version  # Hide HAProxy version
    stats realm Haproxy\ Statistics  # Title text for popup window
    stats uri /haproxy_stats  # Stats URI
    stats auth admin:{{ pillar['stats-password'] }}  # Authentication credentials
    stats show-legends
#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option                  dontlog-normal
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# http frontend which proxys to the backends
#---------------------------------------------------------------------
frontend http-www
     bind *:80
#    acl url_static       path_beg       -i /static /images /javascript /stylesheets
#    acl url_static       path_end       -i .jpg .gif .png .css .js
#    use_backend static   if url_static
     default_backend      app # will redirect to https

#---------------------------------------------------------------------
# https frontend which proxys to the backends
#---------------------------------------------------------------------
frontend https-www
     bind *:443 ssl crt /etc/pki/tls/private/{{ pillar['ssldomain'] }}.pem no-sslv3 ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA
     acl url_static path_end -i .html .js .css .jpg .gif .png .ico .xml .txt
     redirect code 301 location /index.html	if is_root
     use_backend static				if url_static
     acl is_root path -i /
     default_backend app

#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
backend static
    balance roundrobin
    option httpchk
    server staticlocal 127.0.0.1:4331 check inter 5s fastinter 500ms downinter 3s fall 3 rise 2
{%- set COUNTER=1 -%}
{%- set CFNS=pillar['cfns'] -%}
{%- for APPSERVER in salt['pillar.get']('appservers') -%}
	{%- set IP=''.join(salt.dnsutil.A('internal.' + APPSERVER, CFNS)) -%}
	{%- if pillar['hostname'] != APPSERVER -%}
		{%- print '\n    ' -%}server static{{ COUNTER }} {{ IP }}:80 check backup
		{%- set COUNTER = COUNTER + 1 -%}
	{%- endif -%}
{%- endfor -%}
{%- print '\n\n' -%}

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
backend app
    redirect scheme https if !{ ssl_fc }
    balance roundrobin
    option httpchk GET /status
    http-check expect string Status:\ OK
    default-server inter 3s fastinter 500ms downinter 3s fall 3 rise 2
    server applocal 127.0.0.1:8080 check
{%- set COUNTER=1 -%}
{%- for APPSERVER in salt['pillar.get']('appservers') -%}
	{%- set IP=''.join(salt.dnsutil.A('internal.' + APPSERVER, CFNS)) -%}
	{%- if pillar['hostname'] != APPSERVER -%}
		{%- print '\n    ' -%}server app{{ COUNTER }} {{ IP }}:8080 check
		{%- set COUNTER = COUNTER + 1 -%}
	{%- endif -%}
{%- endfor -%}
{%- print '\n' -%}
