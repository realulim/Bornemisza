#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     512
    spread-checks 5
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    listen stats :9000  # Listen on localhost:9000
    mode http
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    stats enable  # Enable stats page
    stats hide-version  # Hide HAProxy version
    stats realm Haproxy\ Statistics  # Title text for popup window
    stats uri /haproxy_stats  # Stats URI
    stats auth admin:{{ pillar['stats-password'] }}  # Authentication credentials
    stats show-legends

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option                  dontlog-normal
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s

#---------------------------------------------------------------------
# http frontend which proxys to the backends
#---------------------------------------------------------------------
#frontend http-in
#     bind *:5984
#    acl url_static       path_beg       -i /static /images /javascript /stylesheets
#    acl url_static       path_end       -i .jpg .gif .png .css .js
#    use_backend static          if url_static
#     default_backend             couchdbs

#---------------------------------------------------------------------
# https frontend which proxys to the backends
#---------------------------------------------------------------------
frontend https-in
     bind *:443 ssl crt /etc/pki/tls/private/{{ pillar['ssldomain'] }}.pem no-sslv3 ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA

     # restrict access to application servers
     acl white_listed src {{ salt['pillar.get']('ipapp1', '') }} {{ salt['pillar.get']('ipapp2', '') }} {{ salt['pillar.get']('ipapp3', '') }}

     reqadd X-Forwarded-Proto:\ https
     # Distinguish between secure and insecure requests
     acl secure dst_port eq 443
     # Mark all cookies as secure if sent over SSL
     rsprep ^Set-Cookie:\ (.*) Set-Cookie:\ \1;\ Secure if secure
     # Add the HSTS header with a 1 year max-age
     rspadd Strict-Transport-Security:\ max-age=31536000 if secure
     # Redirect HTTP to HTTPS
     redirect scheme https code 301 if !{ ssl_fc }

     use_backend couchdbs if white_listed

{%- if 'hostname1' in pillar -%}
    {%- set IP1=''.join(salt.dnsutil.A('internal.' + pillar['hostname1'], '8.8.8.8')) %}
{%- endif %}
{%- if 'hostname2' in pillar -%}
    {%- set IP2=''.join(salt.dnsutil.A('internal.' + pillar['hostname2'], '8.8.8.8')) %}
{%- endif %}
{%- if 'hostname3' in pillar -%}
    {%- set IP3=''.join(salt.dnsutil.A('internal.' + pillar['hostname3'], '8.8.8.8')) %}
{%- endif %}

     http-response add-header X-Backend {{ pillar['privip'] }} if { srv_id 1 }
{%- if 'hostname1' in pillar and pillar['hostname'] == pillar['hostname1'] %}
	{%- if IP2 is defined %}
     http-response add-header X-Backend {{ IP2 }} if { srv_id 2 }
	{%- endif %}
	{%- if IP3 is defined %}
     http-response add-header X-Backend {{ IP3 }} if { srv_id 3 }
	{%- endif %}
{%- endif %}
{%- if 'hostname2' in pillar and pillar['hostname'] == pillar['hostname2'] %}
	{%- if IP1 is defined %}
     http-response add-header X-Backend {{ IP1 }} if { srv_id 2 }
	{%- endif %}
	{%- if IP3 is defined %}
     http-response add-header X-Backend {{ IP3 }} if { srv_id 3 }
	{%- endif %}
{%- endif %}
{%- if 'hostname3' in pillar and pillar['hostname'] == pillar['hostname3'] %}
	{%- if IP1 is defined %}
     http-response add-header X-Backend {{ IP1 }} if { srv_id 2 }
	{%- endif %}
	{%- if IP2 is defined %}
     http-response add-header X-Backend {{ IP2 }} if { srv_id 3 }
	{%- endif %}
{%- endif %}

#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
#backend static
#    balance     roundrobin
#    server      static 127.0.0.1:4331 check

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
backend couchdbs
    balance     roundrobin
    option httpchk GET /_up
    http-check disable-on-404
    server couchdb1 {{ pillar['privip'] }}:5984 check inter 5s fastinter 500ms downinter 3s fall 3 rise 2
{%- if 'hostname1' in pillar and pillar['hostname'] == pillar['hostname1'] %}
	{%- if IP2 is defined %}
    server couchdb2 {{ IP2 }}:5984 check backup
	{%- endif -%}
	{%- if IP3 is defined %}
    server couchdb3 {{ IP3 }}:5984 check backup
	{%- endif -%}
{%- endif -%}
{%- if 'hostname2' in pillar and pillar['hostname'] == pillar['hostname2'] %}
	{%- if IP1 is defined %}
    server couchdb2 {{ IP1 }}:5984 check backup
	{%- endif -%}
	{%- if IP3 is defined %}
    server couchdb3 {{ IP3 }}:5984 check backup
	{%- endif -%}
{%- endif -%}
{%- if 'hostname3' in pillar and pillar['hostname'] == pillar['hostname3'] %}
	{%- if IP1 is defined %}
    server couchdb2 {{ IP1 }}:5984 check backup
	{%- endif -%}
	{%- if IP2 is defined %}
    server couchdb3 {{ IP2 }}:5984 check backup
	{%- endif -%}
{%- endif -%}

